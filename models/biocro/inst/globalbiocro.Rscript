#!/usr/bin/env Rscript

## TODO: modify write.configs to enable regional runs
##       bounding box comes from from sites geom
##       grid size specified in config file
.libPaths("/home/a-m/dlebauer/library/R")
library(PEcAn.data.atmosphere)
library(BioCro)
library(ncdf4)
library(lubridate)
arg   <- commandArgs(trailingOnly = TRUE)

## TODO: Pass lat, lon, start/end date, outdir, met.file, soil parameters in config.xml
#if(length(arg) == 0){
#     lat <- 40.08
#     lon <- -88.23
     start.date <- "1990-01-01"
     end.date <- "2000-12-31"
     outdir <- "/home/a-m/dlebauer/.pecan/demo/"
     inputdir <- "/home/groups/ebimodeling/"
     met.file <- file.path(inputdir, "met/cruncep/all.nc")
#} else {
#     configs <- readXML(args[1])
# lat <- config$lat
# lon <- config$lon
#     lat <- arg[1]
#     lon <- arg[2]
#}

## library(PEcAn.DB)
## todo find soil.nc with spatial queries
## waiting for regions
## TODO allow specification of grid size

soil.nc <- nc_open(file.path(inputdir, "soil/global/soil_global_hd_filled.nc"))
# atmco2.nc <- nc_open(file.path(inputdir, "co2/CO2_Global_HD_v1.nc"))

met.nc <-  nc_open(met.file, readunlim = FALSE)

cruncep_nc2dt <- function(lat, lon, met.nc, start.date, end.date){


    ## Lat and Lon
    Lat <- ncvar_get(met.nc, "lat")
    Lon <- ncvar_get(met.nc, "lon")

    lati <- which.min(abs(Lat - lat))
    loni <- which.min(abs(Lon - lon))

    time.idx <- ncvar_get(met.nc, "time")

    all.dates <- data.table(index = seq(time.idx),
                            date = ymd("1700-01-01") +
                            days(floor(time.idx)) +
                            hours(24*(time.idx - floor(time.idx))))
    run.dates <- all.dates[date > ymd(start.date) & date < ymd(end.date),
                           list(index, date, doy = yday(date),
                                year = year(date), month = month(date),
                                day  = day(date), hour = hour(date))]
    
    currentlat <- round(lat, 2)
    currentlon <- round(lon, 2)
    results <- list()
     
    vars <- list()
 
    mask <- ncvar_get(nc = met.nc, varid = "mask",
                      start = c(loni, lati),
                      count = c(1,1)) 

    variables <- c("lwdown", "press", "qair", "rain", "swdown", "tair", "uwind", "vwind")
    if(mask == -1) {
        stop(paste("chosen lat:", lat, "and  lon:", lon, " is in the ocean"))
    } else if (mask > 0){
        get.ncvar <- function(var, lati = lati, loni = loni, run.dates = run.dates){
            ans <- as.numeric(ncvar_get(nc = met.nc,
                                        varid = var,
                                        start = c(loni, lati, run.dates$index[1]),
                                        count = c(1, 1, nrow(run.dates))))
            return(ans)
        }
        vars <- parallel::mclapply(variables, function(x) get.ncvar(x, lati = lati, loni = loni, run.dates = run.dates ))
        names(vars) <- variables
        # if the above throws an error ... 
        #vars <- lapply(variables, function(x) get.ncvar(x, lati = lati, loni = loni, run.dates = run.dates ))
    }
    
    result <- cbind(run.dates, as.data.table(vars))
    result$wind <- result[,list(wind = sqrt(uwind^2 + vwind^2))]
    return(result)   
}

cruncep_hourly <- function(result, lat){
    
    new.date <- result[,list(hour = c(0:23)),
                       by = c("year", "month", "day", "doy")]

    new.date$date <- new.date[,list(date = ymd(paste(year, month, day)) + hours(hour))]
    
    ## tests
    ## min(result$date) == min(new.date$date)
    ## max(result$date) == max(new.date$date)

    ## converting swdown from W/m2 avg to PPFD
    result$ppfd <- ud.convert(par2ppfd(result$swdown), "mol", "micromol")
        
    
    dailySW <- result[, list(PAR = sum(swdown)*6), by = c("year", "doy")]$PAR
    dailyMJ <- ud.convert(dailySW, "W h", "MJ")
    dailyPPFD <- solarMJ2ppfd(dailyMJ)
    
    dailySWmax <- result[, list(PAR = max(swdown)), by = c("year", "doy")]$PAR
    
    light <- new.date[, lightME(DOY = doy, t.d = 0:23, lat = lat),
                      by = c('year', 'doy')]
    light$Itot <- light[,list(I.dir + I.diff)]
    ## calculating % of daily total sun arriving each hour
    
    resC2 <- light[, list(resC2 = (Itot - min(Itot)) / max(Itot)),
                   by = c("year", "doy")]$resC2

    swdown <- resC2 * rep(dailySWmax, each = 24)
    ppfd <- resC2 * rep(dailyPPFD, each = 24)

    hourly.result <- list()
    hourly.result[["swdown"]] <- swdown
    hourly.result[["ppfd"]] <- ppfd
    for(var in c("press", "qair", "rain", "tair", "wind")){
        
        ## convert units from 6 hourly to hourly
        hrscale <- ifelse(var %in% c("swdown", "rain"), 6, 1)
        
        f <- approxfun(as.numeric(result$date), (result[[var]] / hrscale), rule = 2)
        
        hourly.result[[var]] <- f(as.numeric(new.date$date))
    }

                                                            
    new.result <- cbind(new.date, as.data.table(hourly.result))#[date <= max(result$date),]
    
    if(new.result[,list(h = length(unique(hour))), by = c("year", "doy")][,all(unique(h) != 24)]){
        print(cruncep.file)
        print(new.result[,unique(year)])
        stop("some days don't have 24 hours")
    }
    return(new.result)
}

qair2rh <- function(qair, temp, press = 1013.25){
    es <-  6.112 * exp((17.67 * temp)/(temp + 243.5))
    e <- qair * press / (0.378 * qair + 0.622)
    rh <- e / es
    rh[rh > 1] <- 1
    rh[rh < 0] <- 0

    return(rh)
}

cruncep_dt2weather <- function(weather = result){

    x <- weather[,list(year, doy = doy, hour = hour,
                       solarR   = ppfd, 
                       DailyTemp.C = ud.convert(tair, "Kelvin", "Celsius"),
                       RH = qair2rh(qair = qair, temp = ud.convert(tair, "Kelvin", "Celsius"), press = ud.convert(press, "Pa", "mbar")),
                       WindSpeed  = wind,                       
                       precip = rain)]
    return(x)
}

get.weather <- function(lat, lon, met.nc = met.nc, start.date, end.date){
    if(!is.land(lat, lon)) stop("point is in ocean")
    result <- cruncep_nc2dt(lat = lat, lon = lon, met.nc = met.nc, start.date, end.date)
    new.result <- cruncep_hourly(result, lat = lat)
    save(new.result, file = file.path(outdir, "new.result.RData"))    
    weather <- cruncep_dt2weather(new.result)
}

get.soil <- function(lat, lon, soil.nc = soil.nc){
    
    ## Lat and Lon
    Lat <- ncvar_get(soil.nc, "lat")
    Lon <- ncvar_get(soil.nc, "lon")

    lati <- which.min(abs(Lat - lat))
    loni <- which.min(abs(Lon - lon))

    ## topsoil
    usda_class <- ncvar_get(soil.nc, "t_usda_tex",
                            start = c(loni, lati),
                            count = c(1,1))
    return(usda_class)
}

is.land <- function(lat, lon){
    Lat <- ncvar_get(nc = met.nc, varid = "lat")
    Lon <- ncvar_get(nc = met.nc, varid = "lon")
    lati <- which.min(abs(Lat-lat))
    loni <- which.min(abs(Lon-lon))
    mask <- ncvar_get(nc = met.nc, varid = "mask",
                      start = c(loni, lati), count = c(1,1))
    return(mask >= 0)
}

get.latlonbox <- function(lati, loni, Lat = Lat, Lon = Lon){
    lat <- c(mean(Lat[lati:(lati-1)]), mean(Lat[lati:(lati+1)]))
    lon <- c(mean(Lon[loni:(loni-1)]), mean(Lon[loni:(loni+1)]))
    return(c(sort(lat), sort(lon)))
}

get.cruncep <- function(lat, lon, start.date, end.date){
    result <- cruncep_nc2dt(lat, lon)
    new.result <- cruncep_hourly(result, lat = Lat[lati])
    weather <- cruncep_dt2weather(new.result)
    return(weather)
}

run.biocro <- function(lat, lon, met.nc = met.nc, soil.nc = soil.nc, start.date = start.date, end.date = end.date){
    ## get soil data
    ## abox <- get.latlonbox(lati = lati, loni = loni, Lat = Lat, Lon = Lon)
    ## soil <- get.hwsd.box(abox, con = con)
    if(is.land(lat, lon)){
        soil.type <- 6# get.soil(lat, lon, soil.nc = soil.nc)
        weather <- get.weather(lat, lon, met.nc = met.nc, start.date, end.date)
        result <- list()
        years <- unique(weather$year)
        for(yeari in years){
            WetDat <- as.data.frame(weather[year == yeari, ])
            day1 <- min(WetDat$doy)
            dayn <- max(WetDat$doy)
            yearchar <- as.character(yeari)
            if(yeari == min(years)){
                iplant <- iwillowParms(iRhizome=1.0, iStem=1.0, iLeaf=0.0,
                                       iRoot=1.0, ifrRhizome=0.01, ifrStem=0.01,
                                       ifrLeaf = 0.0, ifrRoot = 0.0)
            } else {
                N <- length(result[[as.character(yeari-1)]]$Rhizome)
                iplant$iRhizome <- result[[as.character(yeari-1)]]$Rhizome[N]
                iplant$iStem <- result[[as.character(yeari-1)]]$Stem[N]
                iplant$iRoot <- result[[as.character(yeari-1)]]$Root[N]
            }
            result[[yearchar]] <- willowGro(WetDat = WetDat,
                                            day1 = day1, dayn = dayn,
                                            soilControl = soilParms(soilType = soil.type))
        }
        result.yeari <- with(result[[yearchar]],
                             data.frame(Year = yeari, DayofYear, Hour, ThermalT,
                                        Stem, Leaf, Root, Rhizome, Grain, LAI,
                                        SoilEvaporation, CanopyTrans))
        if(yeari == min(years) | !exists("resultDT")){
            resultDT <- result.yeari
        } else if (yeari > min(years)){
            resultDT <- rbind(resultDT, result.yeari)
        }
        result <- data.table(cbind(lat = lat, lon = lon, resultDT))
    } else {
        result <- NULL
    }
    return(result)
}

## out <- run.biocro(lat, lon)
## save(out, file = file.path(outdir, "output.RData"))
## con <- get.hwsdcon()

Lat <- ncvar_get(nc = met.nc, varid = "lat")
Lon <- ncvar_get(nc = met.nc, varid = "lon")

## for US
#Lat <- Lat[Lat > 32 & Lat < 49]
#Lon <- Lon[Lon < -67 & Lon > -125]

subsample <- "TRUE"
if(subsample){
   Lat <- Lat[1:18*20]
   Lon <- Lon[1:36*20]
}
#Lat <- Lat[1]
#Lon <- Lon[1]
tmp <- NULL
for(lat in Lat){
    for(lon in Lon){
        land <- is.land(lat, lon)
        if(land){
            out <- run.biocro(lat, lon, met.nc = met.nc, soil.nc = soil.nc, start.date = start.date, end.date = end.date)
#            save(out, file = file.path(outdir,
#                          paste0(lat, "N", lon, "Woutput.RData")))
            tmp <- rbind(tmp, last(out[,list(lat, lon, Year, DayofYear, Hour,
                                            ThermalT, Stem, Leaf, Root, Rhizome,
                                            Grain, LAI, SoilEvaporation, CanopyTrans)]))
        }
    }
}
save(tmp, file = file.path(outdir, "biocro_output.RData"))
