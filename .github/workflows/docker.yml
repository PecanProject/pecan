name: Docker

# initially we would us on: [release] as well, the problem is that
# the code in clowder would not know what branch the code is in,
# and would not set the right version flags.

# This will run when:
# - when new code is pushed to master/develop to push the tags
#   latest and develop
# - when a pull request is created and updated  to make sure the
#   Dockerfile is still valid.
# To be able to push to dockerhub, this execpts the following
# secrets to be set in the project:
# - DOCKERHUB_USERNAME : username that can push to the org
# - DOCKERHUB_PASSWORD : password asscoaited with the username
on:
  push:
    branches:
      - master
      - develop

  pull_request:

# Certain actions will only run when this is the master repo.
env:
  MASTER_REPO: PecanProject/pecan
  DOCKERHUB_ORG: pecan

jobs:
  docker:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      # calculate some variables that are used later
      - name: get version tag
        run: |
          BRANCH=${GITHUB_REF##*/}
          echo "GITHUB_BRANCH=${BRANCH}" >> $GITHUB_ENV
          if [ "$BRANCH" == "master" ]; then
            version="$(awk '/Version:/ { print $2 }' base/all/DESCRIPTION)"
            tags="latest"
            oldversion=""
            while [ "${oldversion}" != "${version}" ]; do
              oldversion="${version}"
              tags="${tags},${version}"
              version=${version%.*}
            done
            echo "PECAN_VERSION=$(awk '/Version:/ { print $2 }' base/all/DESCRIPTION)" >> $GITHUB_ENV
            echo "PECAN_TAGS=${tags}" >> $GITHUB_ENV
          elif [ "$BRANCH" == "develop" ]; then
            echo "PECAN_VERSION=develop" >> $GITHUB_ENV
            echo "PECAN_TAGS=develop" >> $GITHUB_ENV
          else 
            echo "PECAN_VERSION=develop" >> $GITHUB_ENV
            echo "PECAN_TAGS=develop" >> $GITHUB_ENV
          fi

      # use shell script to build, there is some complexity in this
      - name: create images
        run: ./docker.sh -i github
        env:
          PECAN_GIT_CHECKSUM: ${{ github.sha }}
          PECAN_GIT_BRANCH: ${GITHUB_BRANCH}
          VERSION: ${PECAN_VERSION}

      # push all images to github
      - name: Publish to GitHub
        #if: github.event_name == 'push'
        run: |
          repo=$(echo ${{ github.repository }} | tr 'A-Z' 'a-z')
          for image in $(docker image ls pecan/*:github --format "{{ .Repository }}"); do
            for v in ${PECAN_TAGS}; do
              docker tag ${image}:github docker.pkg.github.com/${repo}/${image#pecan/}:${v}
              docker push docker.pkg.github.com/${repo}/${image#pecan/}:${v}
            done
          done

      # push all images to dockerhub
      - name: Publish to DockerHub
        #if: github.event_name == 'push' && github.repository == env.MASTER_REPO
        run: |
          for image in $(docker image ls pecan/*:github --format "{{ .Repository }}"); do
            for v in ${PECAN_TAGS}; do
              docker tag ${image}:github ${{ env.DOCKERHUB_ORG }}/${image#pecan/}:${v}
              docker push ${{ env.DOCKERHUB_ORG }}/${image#pecan/}:${v}
            done
          done

      # # build the docker image, this will always run to make sure
      # # the Dockerfile still works.
      # - name: Build image
      #   run: |
      #     docker build \
      #       --build-arg BRANCH=${GITHUB_BRANCH} \
      #       --build-arg VERSION=${CLOWDER_VERSION} \
      #       --build-arg BUILDNUMBER=${{ github.run_number }} \
      #       --build-arg GITSHA1=${{ github.sha  }} \
      #       --tag image ${{ matrix.FOLDER }}

      # # this will publish to the actor (person) github packages
      # - name: Publish to GitHub
      #   if: github.event_name == 'push'
      #   uses: elgohr/Publish-Docker-Github-Action@2.18
      #   env:
      #     BRANCH: ${{ env.GITHUB_BRANCH }}
      #     VERSION: ${{ env.CLOWDER_VERSION }}
      #     BUILDNUMBER: ${{ github.run_number }}
      #     GITSHA1: ${{ github.sha  }}
      #   with:
      #     name: ${{ github.repository_owner }}/clowder/${{ matrix.IMAGE }}
      #     username: ${{ github.actor }}
      #     password: ${{ secrets.GITHUB_TOKEN }}
      #     context: ${{ matrix.FOLDER }}
      #     tags: "${{ env.CLOWDER_TAGS }}"
      #     registry: docker.pkg.github.com
      #     buildargs: BRANCH,VERSION,BUILDNUMBER,GITSHA1

      # # this will publish to the clowder dockerhub repo
      # - name: Publish to Docker Hub
      #   if: github.event_name == 'push' && github.repository == env.MASTER_REPO
      #   uses: elgohr/Publish-Docker-Github-Action@2.18
      #   env:
      #     BRANCH: ${{ env.GITHUB_BRANCH }}
      #     VERSION: ${{ env.CLOWDER_VERSION }}
      #     BUILDNUMBER: ${{ github.run_number }}
      #     GITSHA1: ${{ github.sha  }}
      #   with:
      #     name: ${{ env.DOCKERHUB_ORG }}/${{ matrix.IMAGE }}
      #     username: ${{ secrets.DOCKERHUB_USERNAME }}
      #     password: ${{ secrets.DOCKERHUB_PASSWORD }}
      #     context: ${{ matrix.FOLDER }}
      #     tags: "${{ env.CLOWDER_TAGS }}"
      #     buildargs: BRANCH,VERSION,BUILDNUMBER,GITSHA1

      # # this will update the README of the dockerhub repo
      # - name: check file
      #   id: filecheck
      #   run: |
      #     if [ "${{ matrix.README }}" != "" ]; then
      #       if [ -e "${{ matrix.README }}" ]; then
      #         echo "##[set-output name=readme;]${{ matrix.README }}"
      #       else
      #         echo "##[set-output name=readme;]"
      #       fi
      #     else
      #       if [ -e "${{ matrix.FOLDER }}/README.md" ]; then
      #         echo "##[set-output name=readme;]${{ matrix.FOLDER }}/README.md"
      #       else
      #         echo "##[set-output name=readme;]"
      #       fi
      #     fi
      # - name: Docker Hub Description
      #   if: github.event_name == 'push' && github.repository == env.MASTER_REPO && env.BRANCH == 'master' && steps.filecheck.outputs.readme != ''
      #   uses: peter-evans/dockerhub-description@v2
      #   env:
      #     DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      #     DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
      #     DOCKERHUB_REPOSITORY: ${{ env.DOCKERHUB_ORG }}/${{ matrix.IMAGE }}
      #     README_FILEPATH: ${{ steps.filecheck.outputs.readme }}
