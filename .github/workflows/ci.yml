name: CI

on:
  push:
    branches:
      - master
      - develop

    tags:
      - '*'

  pull_request:

env:
  # Would be more usual to set R_LIBS_USER, but R uses R_LIBS first if present
  # ...and it's always present here, because the rocker/tidyverse base image
  # checks at R startup time for R_LIBS and R_LIBS_USER, sets both if not found
  R_LIBS: ~/R/library

jobs:

  build:
    runs-on: ubuntu-latest
    #container: pecan/depends:develop

    strategy:
      fail-fast: false
      matrix:
        R:
          - 4.0.2

    steps:
    - uses: actions/checkout@v2
    - name: setup R ${{ matrix.R }}
      uses: r-lib/actions/setup-r@v1
      with:
        r-version: '${{ matrix.R }}'
    - name: install os dependencies
      run: |
        sudo apt-get -qq update
        sudo apt-get -y --no-install-recommends install \
          jags \
          libgdal-dev \
          libglpk-dev \
          librdf0-dev \
          libnetcdf-dev \
          libudunits2-dev \
          libgl1-mesa-dev \
          libglu1-mesa-dev \
          libmagick++-dev
    - name: make lib folders
      run: mkdir -p "${R_LIBS}" "${R_LIBS_USER}"
    - name: cache R packages
      uses: actions/cache@v2
      with:
        key: pkgcache-${{ matrix.R }}-${{ hashFiles('docker/depends/pecan.depends') }}
        path: |
          ${{ env.R_LIBS }}
          ${{ env.R_LIBS_USER }}
        restore-keys: |
          pkgcache-${{ matrix.R }}-
    - name: install core dependencies
      run: |
        Rscript -e "if (!require('devtools')) install.packages('devtools', repos = 'http://cran.rstudio.com')"
        Rscript -e "if (!require('roxygen2')) devtools::install_version('roxygen2', '7.0.2', repos = 'http://cran.rstudio.com')"
    - name: install PEcAn dependencies
      run: |
        bash docker/depends/pecan.depends || Rscript docker/depends/pecan.depends.R
    - name: update dependency lists
      run: Rscript scripts/generate_dependencies.R
    - name: build
      run: |
        ls -l ${R_LIBS_USER} > /tmp/before
        make -j1
        ls -l ${R_LIBS_USER} > /tmp/after
        diff /tmp/before /tmp/after
      env:
        NCPUS: 2
        CI: true
    - name: check
      run: make check
      env:
        REBUILD_DOCS: "FALSE"
        RUN_TESTS: "FALSE"
    # - name: check for out-of-date Rd files
    #   uses: infotroph/tree-is-clean@v1

  test:
    needs: build
    runs-on: ubuntu-latest

    services:
      postgres:
        image: mdillon/postgis:9.5
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    env:
      NCPUS: 2
      PGHOST: postgres
      CI: true

    steps:
    - uses: actions/checkout@v2
    - name: install utils
      run: apt-get update && apt-get install -y openssh-client postgresql-client curl
    - name: db setup
      uses: docker://pecan/db:ci
    - name: add models to db
      run: ./scripts/add.models.sh
    - name: cache R packages
      uses: actions/cache@v2
      with:
        key: pkgcache-${{ matrix.R }}-${{ hashFiles('docker/depends/pecan.depends') }}
        path: |
          ${{ env.R_LIBS }}
          ${{ env.R_LIBS_USER }}
        restore-keys: |
          pkgcache-${{ matrix.R }}-
    - name: test
      run: make test

  check:
    needs: build
    runs-on: ubuntu-latest

    env:
      NCPUS: 2
      CI: true
      _R_CHECK_LENGTH_1_CONDITION_: true
      _R_CHECK_LENGTH_1_LOGIC2_: true
      # Avoid compilation check warnings that come from the system Makevars
      # See https://stat.ethz.ch/pipermail/r-package-devel/2019q2/003898.html
      _R_CHECK_COMPILATION_FLAGS_KNOWN_: -Wformat -Werror=format-security -Wdate-time

    steps:
    - uses: actions/checkout@v2
    - name: install ssh
      run: apt-get update && apt-get install -y openssh-client qpdf
    - name: check
      run: make check
      env:
        REBUILD_DOCS: "FALSE"
        RUN_TESTS: "FALSE"

  sipnet:
    needs: build
    runs-on: ubuntu-latest
    container: pecan/depends:develop

    services:
      postgres:
        image: mdillon/postgis:9.5
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    env:
      PGHOST: postgres

    steps:
    - uses: actions/checkout@v2
    - run: apt-get update && apt-get install -y curl postgresql-client
    - name: install sipnet
      run: |
        cd ${HOME}
        curl -o sipnet_unk.tar.gz http://isda.ncsa.illinois.edu/~kooper/EBI/sipnet_unk.tar.gz
        tar zxf sipnet_unk.tar.gz
        cd sipnet_unk
        make
    - name: db setup
      uses: docker://pecan/db:ci
    - name: add models to db
      run: ./scripts/add.models.sh
    - name: integration test
      run: ./tests/integration.sh ghaction
